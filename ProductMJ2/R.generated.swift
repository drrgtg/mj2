//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `StickerView.bundle`.
    static let stickerViewBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "StickerView", pathExtension: "bundle")
    /// Resource file `launch.png`.
    static let launchPng = Rswift.FileResource(bundle: R.hostingBundle, name: "launch", pathExtension: "png")

    /// `bundle.url(forResource: "StickerView", withExtension: "bundle")`
    static func stickerViewBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stickerViewBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "launch", withExtension: "png")`
    static func launchPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.launchPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 65 images.
  struct image {
    /// Image `icon_c_bbg`.
    static let icon_c_bbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_c_bbg")
    /// Image `icon_c_i_bg`.
    static let icon_c_i_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_c_i_bg")
    /// Image `icon_common_BG`.
    static let icon_common_BG = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_common_BG")
    /// Image `icon_e_bg`.
    static let icon_e_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_bg")
    /// Image `icon_e_colorBG`.
    static let icon_e_colorBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_colorBG")
    /// Image `icon_e_color_slider`.
    static let icon_e_color_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_color_slider")
    /// Image `icon_e_download`.
    static let icon_e_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_download")
    /// Image `icon_e_nor`.
    static let icon_e_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_nor")
    /// Image `icon_e_p_10`.
    static let icon_e_p_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_10")
    /// Image `icon_e_p_11`.
    static let icon_e_p_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_11")
    /// Image `icon_e_p_12`.
    static let icon_e_p_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_12")
    /// Image `icon_e_p_13`.
    static let icon_e_p_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_13")
    /// Image `icon_e_p_14`.
    static let icon_e_p_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_14")
    /// Image `icon_e_p_15`.
    static let icon_e_p_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_15")
    /// Image `icon_e_p_16`.
    static let icon_e_p_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_16")
    /// Image `icon_e_p_17`.
    static let icon_e_p_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_17")
    /// Image `icon_e_p_18`.
    static let icon_e_p_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_18")
    /// Image `icon_e_p_19`.
    static let icon_e_p_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_19")
    /// Image `icon_e_p_1`.
    static let icon_e_p_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_1")
    /// Image `icon_e_p_20`.
    static let icon_e_p_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_20")
    /// Image `icon_e_p_21`.
    static let icon_e_p_21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_21")
    /// Image `icon_e_p_22`.
    static let icon_e_p_22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_22")
    /// Image `icon_e_p_23`.
    static let icon_e_p_23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_23")
    /// Image `icon_e_p_24`.
    static let icon_e_p_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_24")
    /// Image `icon_e_p_25`.
    static let icon_e_p_25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_25")
    /// Image `icon_e_p_26`.
    static let icon_e_p_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_26")
    /// Image `icon_e_p_27`.
    static let icon_e_p_27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_27")
    /// Image `icon_e_p_28`.
    static let icon_e_p_28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_28")
    /// Image `icon_e_p_29`.
    static let icon_e_p_29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_29")
    /// Image `icon_e_p_2`.
    static let icon_e_p_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_2")
    /// Image `icon_e_p_30`.
    static let icon_e_p_30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_30")
    /// Image `icon_e_p_31`.
    static let icon_e_p_31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_31")
    /// Image `icon_e_p_32`.
    static let icon_e_p_32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_32")
    /// Image `icon_e_p_33`.
    static let icon_e_p_33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_33")
    /// Image `icon_e_p_34`.
    static let icon_e_p_34 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_34")
    /// Image `icon_e_p_35`.
    static let icon_e_p_35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_35")
    /// Image `icon_e_p_36`.
    static let icon_e_p_36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_36")
    /// Image `icon_e_p_37`.
    static let icon_e_p_37 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_37")
    /// Image `icon_e_p_38`.
    static let icon_e_p_38 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_38")
    /// Image `icon_e_p_39`.
    static let icon_e_p_39 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_39")
    /// Image `icon_e_p_3`.
    static let icon_e_p_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_3")
    /// Image `icon_e_p_40`.
    static let icon_e_p_40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_40")
    /// Image `icon_e_p_4`.
    static let icon_e_p_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_4")
    /// Image `icon_e_p_5`.
    static let icon_e_p_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_5")
    /// Image `icon_e_p_6`.
    static let icon_e_p_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_6")
    /// Image `icon_e_p_7`.
    static let icon_e_p_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_7")
    /// Image `icon_e_p_8`.
    static let icon_e_p_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_8")
    /// Image `icon_e_p_9`.
    static let icon_e_p_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_p_9")
    /// Image `icon_e_sel`.
    static let icon_e_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_sel")
    /// Image `icon_e_slider_level`.
    static let icon_e_slider_level = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_slider_level")
    /// Image `icon_e_slider`.
    static let icon_e_slider = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_e_slider")
    /// Image `icon_h_1`.
    static let icon_h_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_1")
    /// Image `icon_h_2`.
    static let icon_h_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_2")
    /// Image `icon_h_3`.
    static let icon_h_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_3")
    /// Image `icon_h_4`.
    static let icon_h_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_4")
    /// Image `icon_h_5`.
    static let icon_h_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_5")
    /// Image `icon_h_more`.
    static let icon_h_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_more")
    /// Image `icon_h_store`.
    static let icon_h_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_store")
    /// Image `icon_h_text`.
    static let icon_h_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_h_text")
    /// Image `icon_i_goldb`.
    static let icon_i_goldb = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_i_goldb")
    /// Image `icon_i_golds`.
    static let icon_i_golds = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_i_golds")
    /// Image `icon_s_home`.
    static let icon_s_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_s_home")
    /// Image `icon_s_right`.
    static let icon_s_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_s_right")
    /// Image `icon_sv_right`.
    static let icon_sv_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_sv_right")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_c_bbg", bundle: ..., traitCollection: ...)`
    static func icon_c_bbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_c_bbg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_c_i_bg", bundle: ..., traitCollection: ...)`
    static func icon_c_i_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_c_i_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_common_BG", bundle: ..., traitCollection: ...)`
    static func icon_common_BG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_common_BG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_bg", bundle: ..., traitCollection: ...)`
    static func icon_e_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_colorBG", bundle: ..., traitCollection: ...)`
    static func icon_e_colorBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_colorBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_color_slider", bundle: ..., traitCollection: ...)`
    static func icon_e_color_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_color_slider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_download", bundle: ..., traitCollection: ...)`
    static func icon_e_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_nor", bundle: ..., traitCollection: ...)`
    static func icon_e_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_nor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_1", bundle: ..., traitCollection: ...)`
    static func icon_e_p_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_10", bundle: ..., traitCollection: ...)`
    static func icon_e_p_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_11", bundle: ..., traitCollection: ...)`
    static func icon_e_p_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_12", bundle: ..., traitCollection: ...)`
    static func icon_e_p_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_13", bundle: ..., traitCollection: ...)`
    static func icon_e_p_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_14", bundle: ..., traitCollection: ...)`
    static func icon_e_p_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_15", bundle: ..., traitCollection: ...)`
    static func icon_e_p_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_16", bundle: ..., traitCollection: ...)`
    static func icon_e_p_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_17", bundle: ..., traitCollection: ...)`
    static func icon_e_p_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_18", bundle: ..., traitCollection: ...)`
    static func icon_e_p_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_19", bundle: ..., traitCollection: ...)`
    static func icon_e_p_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_2", bundle: ..., traitCollection: ...)`
    static func icon_e_p_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_20", bundle: ..., traitCollection: ...)`
    static func icon_e_p_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_21", bundle: ..., traitCollection: ...)`
    static func icon_e_p_21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_21, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_22", bundle: ..., traitCollection: ...)`
    static func icon_e_p_22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_23", bundle: ..., traitCollection: ...)`
    static func icon_e_p_23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_23, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_24", bundle: ..., traitCollection: ...)`
    static func icon_e_p_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_24, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_25", bundle: ..., traitCollection: ...)`
    static func icon_e_p_25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_26", bundle: ..., traitCollection: ...)`
    static func icon_e_p_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_27", bundle: ..., traitCollection: ...)`
    static func icon_e_p_27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_27, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_28", bundle: ..., traitCollection: ...)`
    static func icon_e_p_28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_28, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_29", bundle: ..., traitCollection: ...)`
    static func icon_e_p_29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_29, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_3", bundle: ..., traitCollection: ...)`
    static func icon_e_p_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_30", bundle: ..., traitCollection: ...)`
    static func icon_e_p_30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_31", bundle: ..., traitCollection: ...)`
    static func icon_e_p_31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_31, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_32", bundle: ..., traitCollection: ...)`
    static func icon_e_p_32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_32, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_33", bundle: ..., traitCollection: ...)`
    static func icon_e_p_33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_33, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_34", bundle: ..., traitCollection: ...)`
    static func icon_e_p_34(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_34, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_35", bundle: ..., traitCollection: ...)`
    static func icon_e_p_35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_35, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_36", bundle: ..., traitCollection: ...)`
    static func icon_e_p_36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_36, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_37", bundle: ..., traitCollection: ...)`
    static func icon_e_p_37(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_37, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_38", bundle: ..., traitCollection: ...)`
    static func icon_e_p_38(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_38, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_39", bundle: ..., traitCollection: ...)`
    static func icon_e_p_39(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_39, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_4", bundle: ..., traitCollection: ...)`
    static func icon_e_p_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_40", bundle: ..., traitCollection: ...)`
    static func icon_e_p_40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_5", bundle: ..., traitCollection: ...)`
    static func icon_e_p_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_6", bundle: ..., traitCollection: ...)`
    static func icon_e_p_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_7", bundle: ..., traitCollection: ...)`
    static func icon_e_p_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_8", bundle: ..., traitCollection: ...)`
    static func icon_e_p_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_p_9", bundle: ..., traitCollection: ...)`
    static func icon_e_p_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_p_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_sel", bundle: ..., traitCollection: ...)`
    static func icon_e_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_slider", bundle: ..., traitCollection: ...)`
    static func icon_e_slider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_slider, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_e_slider_level", bundle: ..., traitCollection: ...)`
    static func icon_e_slider_level(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_e_slider_level, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_1", bundle: ..., traitCollection: ...)`
    static func icon_h_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_2", bundle: ..., traitCollection: ...)`
    static func icon_h_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_3", bundle: ..., traitCollection: ...)`
    static func icon_h_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_4", bundle: ..., traitCollection: ...)`
    static func icon_h_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_5", bundle: ..., traitCollection: ...)`
    static func icon_h_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_more", bundle: ..., traitCollection: ...)`
    static func icon_h_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_store", bundle: ..., traitCollection: ...)`
    static func icon_h_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_store, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_h_text", bundle: ..., traitCollection: ...)`
    static func icon_h_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_h_text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_i_goldb", bundle: ..., traitCollection: ...)`
    static func icon_i_goldb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_i_goldb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_i_golds", bundle: ..., traitCollection: ...)`
    static func icon_i_golds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_i_golds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_s_home", bundle: ..., traitCollection: ...)`
    static func icon_s_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_s_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_s_right", bundle: ..., traitCollection: ...)`
    static func icon_s_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_s_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_sv_right", bundle: ..., traitCollection: ...)`
    static func icon_sv_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_sv_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `PMCoinCollectionViewCellID`.
    static let pmCoinCollectionViewCellID = _R.nib._PMCoinCollectionViewCellID()
    /// Nib `PMCoinViewController`.
    static let pmCoinViewController = _R.nib._PMCoinViewController()
    /// Nib `PMEditBorderToolView`.
    static let pmEditBorderToolView = _R.nib._PMEditBorderToolView()
    /// Nib `PMEditViewController`.
    static let pmEditViewController = _R.nib._PMEditViewController()
    /// Nib `PMHomeCollectionViewCell`.
    static let pmHomeCollectionViewCell = _R.nib._PMHomeCollectionViewCell()
    /// Nib `PMPrivacyViewController`.
    static let pmPrivacyViewController = _R.nib._PMPrivacyViewController()
    /// Nib `PMSaveViewController`.
    static let pmSaveViewController = _R.nib._PMSaveViewController()
    /// Nib `PMSettingTableViewCell`.
    static let pmSettingTableViewCell = _R.nib._PMSettingTableViewCell()
    /// Nib `PMSettingViewController`.
    static let pmSettingViewController = _R.nib._PMSettingViewController()
    /// Nib `PMTemsViewController`.
    static let pmTemsViewController = _R.nib._PMTemsViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMCoinCollectionViewCellID", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmCoinCollectionViewCellID) instead")
    static func pmCoinCollectionViewCellID(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmCoinCollectionViewCellID)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMCoinViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmCoinViewController) instead")
    static func pmCoinViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmCoinViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMEditBorderToolView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmEditBorderToolView) instead")
    static func pmEditBorderToolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmEditBorderToolView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMEditViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmEditViewController) instead")
    static func pmEditViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmEditViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMHomeCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmHomeCollectionViewCell) instead")
    static func pmHomeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmHomeCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMPrivacyViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmPrivacyViewController) instead")
    static func pmPrivacyViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmPrivacyViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMSaveViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmSaveViewController) instead")
    static func pmSaveViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmSaveViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMSettingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmSettingTableViewCell) instead")
    static func pmSettingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmSettingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMSettingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmSettingViewController) instead")
    static func pmSettingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmSettingViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PMTemsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pmTemsViewController) instead")
    static func pmTemsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pmTemsViewController)
    }
    #endif

    static func pmCoinCollectionViewCellID(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMCoinCollectionViewCell? {
      return R.nib.pmCoinCollectionViewCellID.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMCoinCollectionViewCell
    }

    static func pmCoinViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmCoinViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pmEditBorderToolView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMEditBorderToolView? {
      return R.nib.pmEditBorderToolView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMEditBorderToolView
    }

    static func pmEditViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmEditViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pmHomeCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMHomeCollectionViewCell? {
      return R.nib.pmHomeCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMHomeCollectionViewCell
    }

    static func pmPrivacyViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmPrivacyViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pmSaveViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmSaveViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pmSettingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMSettingTableViewCell? {
      return R.nib.pmSettingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMSettingTableViewCell
    }

    static func pmSettingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmSettingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pmTemsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pmTemsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PMCoinCollectionViewCellID`.
    static let pmCoinCollectionViewCellID: Rswift.ReuseIdentifier<PMCoinCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PMCoinCollectionViewCellID")
    /// Reuse identifier `PMHomeCollectionViewCellID`.
    static let pmHomeCollectionViewCellID: Rswift.ReuseIdentifier<PMHomeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PMHomeCollectionViewCellID")
    /// Reuse identifier `PMSettingTableViewCellID`.
    static let pmSettingTableViewCellID: Rswift.ReuseIdentifier<PMSettingTableViewCell> = Rswift.ReuseIdentifier(identifier: "PMSettingTableViewCellID")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PMCoinCollectionViewCellID.validate()
      try _PMEditBorderToolView.validate()
      try _PMEditViewController.validate()
      try _PMSaveViewController.validate()
      try _PMSettingTableViewCell.validate()
    }

    struct _PMCoinCollectionViewCellID: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PMCoinCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PMCoinCollectionViewCellID"
      let name = "PMCoinCollectionViewCellID"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMCoinCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMCoinCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_c_bbg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_c_bbg' is used in nib 'PMCoinCollectionViewCellID', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_c_i_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_c_i_bg' is used in nib 'PMCoinCollectionViewCellID', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_i_goldb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_i_goldb' is used in nib 'PMCoinCollectionViewCellID', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PMCoinViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PMCoinViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PMEditBorderToolView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PMEditBorderToolView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMEditBorderToolView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMEditBorderToolView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_e_colorBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_e_colorBG' is used in nib 'PMEditBorderToolView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PMEditViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PMEditViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_e_nor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_e_nor' is used in nib 'PMEditViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_e_sel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_e_sel' is used in nib 'PMEditViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PMHomeCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PMHomeCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "PMHomeCollectionViewCellID"
      let name = "PMHomeCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMHomeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMHomeCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _PMPrivacyViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PMPrivacyViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PMSaveViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PMSaveViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_sv_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_sv_right' is used in nib 'PMSaveViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PMSettingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PMSettingTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PMSettingTableViewCellID"
      let name = "PMSettingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PMSettingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PMSettingTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_s_right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_s_right' is used in nib 'PMSettingTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PMSettingViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PMSettingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PMTemsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PMTemsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PMHomeViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let pmHomeViewControllerID = StoryboardViewControllerResource<PMHomeViewController>(identifier: "PMHomeViewControllerID")

      func pmHomeViewControllerID(_: Void = ()) -> PMHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pmHomeViewControllerID)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_h_store", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_h_store' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_h_text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_h_text' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().pmHomeViewControllerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pmHomeViewControllerID' could not be loaded from storyboard 'Main' as 'PMHomeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
